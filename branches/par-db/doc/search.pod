=head1 Searching with Tesserae

The process of performing a Tesserae search has two steps.  First the search script, I<cgi-bin/read_table.pl> is called.  This compares two texts, determines which sentences/lines match each other, and saves the results as a giant hash, stored inside a Storable binary.

In the second step, the script I<read_bin.pl> reads that binary and turns the hash into a nice list.  It has three different output modes, one produces a paged HTML table for the web interface, one creates a sorted CSV, and the last just dumps an XML file with all the data.

When the program is run from the web interface, the storable binaries produced by I<read_table.pl> are given incremental session numbers as their filenames and they're stored in the I<tmp/> directory.  If you're running Tesserae from the command line, you can give the results file your own name.

=head2 Example

Here's how to run the benchmark search.  This checks for allusions to Vergil's I<Aeneid> in Book 1 of Lucan's I<Pharsalia>.  If everything is working, you should end up with a CSV file giving a ranked table of pairs of matching phrases from the two texts.

   % cgi-bin/read_table.pl --target lucan.pharsalia.part.1 --source vergil.aeneid --unit phrase --bin myresults.bin

   % cgi-bin/read_bin.pl --export csv --rev --sort score myresults.bin > myresults.csv

=head2 See also

More details on the available options for these scripts can be found in the pod documentation within the respective scripts.

=cut